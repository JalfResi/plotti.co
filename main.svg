<?xml-stylesheet type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" ?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="chart" height="210" width="610" viewBox="0 0 610 210" preserveAspectRatio="none" onload="init()">
<script type="text/javascript" charset="utf-8">

var ptoken = Math.random().toString(36).slice(2);
// if(document.cookie.indexOf("ptoken") == -1) document.cookie = "ptoken="+ptoken; // seems that object does not support cookies?

xmlns = "http://www.w3.org/2000/svg";

var pathlist = document.location.pathname.split("/");
if(pathlist[1] == "lock") hashstr = pathlist[pathlist.length-1];
else hashstr = pathlist[1];
   

var MAXPOINTS = $MAXPOINTS;
var old_x = 0;
var l_y = $L_Y;
var scaleY = 1.0;
var tr_x = 0;
var init_max_y = $INIT_MAX_Y;
var y_shift = $Y_SHIFT;
var max_y = $MAX_Y;
var scale_sec = $SECONDS_SCALE;
var height = 150; // value used for generator
var width = 500; // value used for generator
var trdn = 0;
var _init_done = false;
var last_msg_id = 0;
var callbacks = [];
var subscribed = false;
var stream = false;
var old_ptoken = "";
var first = true;
var checkTimer = null;
var y_avg = 999;
var my_cb_list = null;
var my_cb_index = -1;

Math.log10 = Math.log10 || function(x) {
  return Math.log(x) / Math.LN10;
};

function round_to_1(x) {
    return parseFloat((x).toPrecision(1))
}

function T(time_half) {
    this.document.getElementById("trel").setAttribute("transform", "translate("+this.tr_x+",150) scale(1,"+(-this.scaleY)+")");
    if(time_half) {
        var hrs = ~~(time_half / 3600);
        var mins = ~~((time_half % 3600) / 60);
        var secs = parseInt(time_half % 60);
        var timestring = "";
        if(hrs) {
            timestring = hrs+"h";
            timestring += round_to_1(mins)+"m";
        } else if(mins) {
            timestring += round_to_1(mins)+"m";
            if(4>mins) if (secs>10) {
                timestring += round_to_1(secs)+"s";
            } 
        } else {
            timestring = round_to_1(secs)+"s";
        }
        this.document.getElementById("timeMid").innerHTML=timestring;
    }
}

function ev_process (e) {
    if(!this._init_done) {
        // console.log(this.hashstr+" is not initialized");
        return;
    }
    this.tr = this.document.getElementById("trel");
    var dlist = e.data.split("\t"); // TODO: kill IE here
    var dest_hash = dlist[0];
    var msg_id = parseInt(dlist[1]);
    var p_data = dlist[2];
    // console.log("Event at "+this.hashstr+" dest:"+dest_hash+" id:"+msg_id+" data:"+p_data);
    
    if(this.last_msg_id >= msg_id) return;
    this.last_msg_id = msg_id;
    
    for(var j=0; this.callbacks.length > j; j++) {
        if(this.callbacks[j]) this.callbacks[j](e);
    }
    if(dest_hash != this.hashstr) {
        return;
    }
    
    var all_data = p_data.split(",").slice(0, 9);
    var el = this.document.createElementNS(this.xmlns,"g");
    var x = this.old_x + this.width / this.MAXPOINTS; // value used for generator (50 pts)
    for(i=0; all_data.length>i;i++) {
        if(all_data[i] == "") continue;
        var pt = this.gen_pt(i, all_data[i], x);
        if(!pt) continue;
        el.appendChild(pt);
    }
    var seconds = (new Date()).getTime() / 1000;
    el.seconds = seconds;
    el.xval = x;
    this.old_x = x;
    this.tr.appendChild(el);
    if(x > 500) {
        this.tr_x = -(x-500); 
        this.tr.removeChild(this.tr.childNodes[0]);
    }
    if(this.tr.childNodes.length > 2) document.getElementById("singleVal").innerHTML="";
    
    var time_half = parseFloat(seconds - this.tr.childNodes[0].seconds) / parseFloat(x - this.tr.childNodes[0].xval) * parseFloat(500) / 2;
    this.T(time_half);
}

process_event = function(e) { //???
    ev_process(e);
};

function closeStream() {
    if(!first) stream.close();
}

function resubscribe() {
    
    var frames = window.parent.frames;
    // 1. check if we are the first index of plots on page
    
    first = true;
    var firstIdx = 0;
    for (var firstIdx = 0; frames.length>firstIdx; firstIdx++) { 
        try {
            if(frames[firstIdx].hashstr) {
                if(frames[firstIdx] != window) first = false;
                break;
            }
        } catch (e) {} // DOMException
    }
    
    if(!first) { // if we are not first, subscribe to first
        var cbs = frames[firstIdx].callbacks;
        if(this.my_cb_list) if(cbs !== this.my_cb_list) {
            this.my_cb_list[this.my_cb_index] = null;
        }
        if(cbs.indexOf(process_event) == -1) {
            this.my_cb_index = cbs.push(process_event) - 1;
            this.my_cb_list = cbs;
        }
        // close our connection, if we have one
        if(stream) stream.close();
        // take ptoken
        old_ptoken = ptoken;
        ptoken = frames[firstIdx].ptoken;
    } else {
        // console.log("First! "+hashstr);
        // we are suddenly first... need a new ptoken
        old_ptoken = "";
        clearTimeout(checkTimer); // no need to check anything anymore
    }
    
    if(old_ptoken == ptoken) return; // if our ptoken did not change - exit
    
    if (!window.EventSource) {
        var js = document.createElementNS("http://www.w3.org/1999/xhtml", "script")
        js.src = "/eventsource.min.js";
        document.documentElement.appendChild(js);
        js.onload = js.onreadystatechange = function() {
            stream = new EventSource('//' + document.domain + ':' + location.port + "/"+hashstr+"/stream?ptoken="+ptoken)
            stream.onmessage = function(e){if(subscribed)if(subscribed.readyState == 1) stream.close();ev_process(e);};
            old_ptoken = ptoken;
            //stream.onopen = function(e) {if(subscribed) if(subscribed.readyState == 1) stream.close();};
            stream.onopen = function(e) {setTimeout(closeStream, 50);};
        }
    } else {
        stream = new EventSource('//' + document.domain + ':' + location.port + "/"+hashstr+"/stream?ptoken="+ptoken)
        stream.onmessage = function(e){if(subscribed)if(subscribed.readyState == 1) stream.close();ev_process(e);};
        // stream.onopen = function(e) {if(subscribed){if(subscribed.readyState == 1) stream.close();
        //     // console.log("Closing connection on subscribed "+hashstr+" readyState "+subscribed.readyState); 
        // }};
        old_ptoken = ptoken;
        stream.onopen = function(e) {setTimeout(closeStream, 50);};
    }
}

resubscribe();

if(!first) var checkTimer = setInterval(resubscribe, 2000+parseInt(Math.random()*1000));
function condReload() {
    if(trdn != 0) if(y_shift != 0) location.reload();
    if((30/scaleY) > y_avg) location.reload();
}
var reloadTimer = setInterval(condReload, parseInt(2*60*1000+Math.random()*3*60*1000));

function gen_pt(i, ydata, x) {
    var y_data = parseFloat(ydata) - this.y_shift; 
    var txt = ydata.replace(RegExp("[\\d.,]+"),"");
    if(txt.length) {
        this.document.getElementById("msg").innerHTML=txt;
    }
    var max_y_c = this.max_y;
    if(0 > this.trdn) {
        max_y_c = this.max_y / 2;
    }
    
    if(Math.abs(y_data) > max_y_c) {
        var dig=Math.abs(y_data);
        this.max_y = (Math.floor(dig/Math.pow(10,Math.floor(Math.log10(dig))))+1)*Math.pow(10,Math.floor(Math.log10(dig))); 
        if(0 > this.trdn) max_y*=2
    }
    if(this.init_max_y == false) {
        this.init_max_y = this.max_y;
    }
    this.scaleY = this.init_max_y / this.max_y;
    var mid_val = (this.max_y+2*this.y_shift)/2;
    for(var mid_idx=0;mid_val >= 1e3;mid_idx++) mid_val /= 1e3;
    var mid_val_ex = ["","k","M","G","T","e"][mid_idx];
    if(mid_val > 1) mid_val = Math.round(mid_val * 100) / 100;
    if(mid_val > 0) mid_val = Math.round(mid_val * 1000) / 1000;
    if(mid_idx > 0) mid_val = Math.round(mid_val * 10) / 10;
    this.document.getElementById("valueMid").innerHTML=mid_val+mid_val_ex; 
    var y = parseInt(y_data / this.init_max_y * this.height);
    if(isNaN(y) || isNaN(this.l_y[i])) { 
        if(this.console) {
            console.log("Cannot calculate y y_data="+y_data+" init_max_y="+this.init_max_y+" height="+this.height+" ydt="+this.ydata);
        }
        return false;
    }
    if(0 > y) if (this.trdn == 0) {
        this.trdn = -68+20; // value used for generator
        this.document.getElementById("shift").setAttribute("transform", "translate(55,"+this.trdn+")");
    }
    this.y_avg = 49 * this.y_avg / 50 + y / 50;
    if(y > this.y_avg) this.y_avg = y;
    var pt = this.old_x+","+this.l_y[i]+" "+x+","+y;
    var el = this.document.createElementNS(this.xmlns,"polyline");
    el.setAttributeNS(null, "points", pt);
    el.setAttributeNS(null, "class", "src"+i);
    this.l_y[i] = y;
    return el;
}

function set_value_disp() {
    var de = document.getElementById("trel");
    var initVals=[];
    if(2 > de.childNodes.length) {
        for(var j=0;l_y.length>j;j++) {
            if(l_y[j] != 0) initVals.push( Math.round(l_y[j] * init_max_y / height * 100) / 100);
        }
    }
    document.getElementById("singleVal").innerHTML=initVals.join(";");
}

function init() {
    if(navigator.userAgent.indexOf('AppleWebKit') != -1){
        // fix for webkit bug https://bugs.chromium.org/p/chromium/issues/detail?id=467484
        var rect = document.documentElement.getBoundingClientRect();
        var width_off = 610 - rect.width;
        document.getElementById("labels").setAttribute("x", parseInt(document.getElementById("labels").getAttribute("x")) - width_off);
    }
    var de = document.getElementById("trel");
    if(de.firstChild) if(!de.firstChild.xval) {
        var max_t = scale_sec*2;
        var pts = de.childNodes.length;
        var dt = max_t / MAXPOINTS;
        var ts = (new Date()).getTime() / 1000;
        for(var j=0;pts>j;j++) {
            de.childNodes[j].xval = j * (width / MAXPOINTS);
            de.childNodes[j].seconds = ts - ((pts - j) * dt);
        }
        var innum=0;
        if(!window.l_y) {
            window.l_y = [0,0,0,0,0,0,0,0,0,0];
        }
        for(var j=0;de.lastChild.childNodes.length>j;j++) {
            innum = parseInt(de.lastChild.childNodes[j].getAttribute("class").replace("src",""));
            l = de.lastChild.childNodes[j].getAttribute("points").split(",");
            l_y[innum] = parseInt(l[l.length-1]);
        }
        old_x = pts * (width / MAXPOINTS);
    }
    set_value_disp();
    _init_done = true;
}

function renderImage() {
    var img = new Image()
    img.onload = function(){
        var canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")
        canvas.width = parseInt(document.documentElement.getAttribute("width"))
        canvas.height = parseInt(document.documentElement.getAttribute("height"))
        var ctx = canvas.getContext("2d")
        ctx.drawImage(img,0,0)
        var imgDataURL = canvas.toDataURL();
        document.getElementById("downloadlink").href=imgDataURL;
        document.getElementById("downloadlink").style.color="gray";
    }
    var svg_xml = (new XMLSerializer()).serializeToString(document.documentElement);
    img.src="data:image/svg+xml;base64,"+btoa(svg_xml);
}

</script>
<style>

.axis {
stroke: #000000;
stroke-width: 1px;
}

.liner {
stroke: #000000;
stroke-width: 1px;
stroke-dasharray: 1,5;
}


body {
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

polyline {
    fill: none;
    stroke-width: 2;
    vector-effect: non-scaling-stroke;
}

.data {
    stroke: #0074d9;
}

body, html {
  height: 100%;
}

.src0 {
    stroke: #5DA5DA; /* (blue) */
}
.src1 {
    stroke: #F15854; /* (red) */
}
.src2 {
    stroke: #DECF3F; /* (yellow) */
}
.src3 {
    stroke: #B276B2; /* (purple) */
}
.src4 {
    stroke: #B2912F; /* (brown) */
}
.src5 {
    stroke: #F17CB0; /* (pink) */
}
.src6 {
    stroke: #60BD68; /* (green) */
}
.src7 {
    stroke: #FAA43A; /* (orange) */
}
.src8 {
    stroke: #4D4D4D; /* (gray) */
}


.links {
    color: lightgray;
}

.social:hover {
    opacity: 1;
    transition: opacity 0.7s ease-in-out;
}

.social {
    opacity: 0;
    transition: opacity 0.7s ease-in-out;
}


.byplotti {
    color: lightgray; 
    position: relative; 
    top: 5px; 
    left: 145px; 
    font-size: 10px;
    text-decoration: none;
}
.byplotti:hover {
    color: gray; 
}

</style>

<g transform="translate(55,$TRDN)" id="shift">
<text x="5" y="5" text-anchor="start" id="msg" style="font-size: 18px">$MSG</text>
<text x="-5" y="79" text-anchor="end" id="valueMid" style="font-size: 18px">$VALUEMID</text>
<text x="250" y="170" text-anchor="middle" id="timeMid" style="font-size: 18px">$TIMEMID</text>
<text x="-5" y="155" text-anchor="end" id="zeroax" style="font-size: 18px">$ZERO</text>
<svg class="axis">
    <polyline points="0,150 500,150"/>
    <polyline points="250,150 250,146"/>
    <polyline points="0,0 0,150"/>
</svg>

<svg class="liner">
    <polyline points="0,75 500,75"/>
</svg>
<g transform="translate(0,150) scale(1,-1)" id="trel">$DATAPOINTS</g>
</g>
<foreignObject x="340" y="10" width="250" height="100" id="labels">
      <div xmlns="http://www.w3.org/1999/xhtml" style="width: 200px; height: 100px;" class="social">
          <a href="https://plotti.co" target="_blank" class="byplotti">plotti.co</a><a href="#" class="links" style="color: lightgray; position: relative; top: 10px; left: 160px;" id="downloadlink" download="plot.png" onmouseover="renderImage()" onmouseout="this.style.color='lightgray'"><i class="fa fa-download fa-1"></i></a>
      </div>
</foreignObject>
<text x="300" y="110" text-anchor="middle" id="singleVal" style="font-size: 60px;fill: gray;"></text>
</svg>