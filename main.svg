<svg xmlns="http://www.w3.org/2000/svg" class="chart" height="210" width="610" viewBox="0 0 610 210" preserveAspectRatio="none" onload="init()">
<script type="text/javascript" charset="utf-8">
var pathlist = document.location.pathname.split("/");
if(pathlist[1] == "lock") hashstr = pathlist[pathlist.length-1];
else hashstr = pathlist[1];
var stream = new EventSource('http://' + document.domain + ':' + location.port + "/"+hashstr+"/stream")
xmlns = "http://www.w3.org/2000/svg";

var MAXPOINTS = $MAXPOINTS;
var old_x = 0;
var l_y = [0,0,0,0,0,0,0,0,0,0];
var scaleY = 1.0;
var tr_x = 0;
var init_max_y = $INIT_MAX_Y;
var max_y = $MAX_Y;
var scale_sec = $SECONDS_SCALE;
var height = 150; // value used for generator
var width = 500; // value used for generator
var trdn = 0;

function round_to_1(x) {
    return parseFloat((x).toPrecision(1))
}

function T(time_half) {
    document.getElementById("trel").setAttribute("transform", "translate("+tr_x+",150) scale(1,"+(-scaleY)+")");
    if(time_half) {
        var hrs = ~~(time_half / 3600);
        var mins = ~~((time_half % 3600) / 60);
        var secs = parseInt(time_half % 60);
        var timestring = "";
        if(hrs) {
            timestring = hrs+"h";
            timestring += round_to_1(mins)+"m";
        } else if(mins) {
            timestring += round_to_1(mins)+"m";
            if(4>mins) if (secs>10) {
                timestring += round_to_1(secs)+"s";
            } 
        } else {
            timestring = round_to_1(secs)+"s";
        }
        document.getElementById("timeMid").innerHTML=timestring;
    }
}

stream.onmessage = function (e) {
    tr = document.getElementById("trel");
    var all_data = e.data.split(",").slice(0, 9);
    var el = document.createElementNS(xmlns,"g");
    var x = old_x + width / MAXPOINTS; // value used for generator (50 pts)
    for(i=0; all_data.length>i;i++) {
        if(all_data[i] == "") continue;
        var pt = gen_pt(i, all_data[i], x);
        el.appendChild(pt);
    }
    var seconds = (new Date()).getTime() / 1000;
    el.seconds = seconds;
    el.xval = x;
    old_x = x;
    tr.appendChild(el);
    if(x > 500) {
        tr_x = -(x-500); 
        tr.removeChild(tr.childNodes[0]);
    }
    
    time_half = parseFloat(seconds - tr.childNodes[0].seconds) / parseFloat(x - tr.childNodes[0].xval) * parseFloat(500) / 2;
    T(time_half);
}

function gen_pt(i, ydata, x) {
    var y_data = parseFloat(ydata); 
    var txt = ydata.replace(RegExp("[\\d.,]+"),"");
    if(txt.length) {
        document.getElementById("msg").innerHTML=txt;
    }
    if(0 > trdn) {
        max_y_c = max_y / 2;
    } else {
        max_y_c = max_y;
    }
    
    if(Math.abs(y_data) > max_y_c) {
        var dig=Math.abs(y_data);
        max_y = (Math.floor(dig/Math.pow(10,Math.floor(Math.log10(dig))))+1)*Math.pow(10,Math.floor(Math.log10(dig))); 
        if(0 > trdn) max_y*=2
    }
    if(init_max_y == false) {
        init_max_y = max_y;
    }
    scaleY = init_max_y / max_y;
    mid_val = max_y/2;
    for(mid_idx=0;mid_val >= 1e3;mid_idx++) mid_val /= 1e3;
    mid_val_ex = ["","k","M","G","T","e"][mid_idx];
    if(mid_val > 1) mid_val = Math.round(mid_val * 100) / 100;
    if(mid_val > 0) mid_val = Math.round(mid_val * 1000) / 1000;
    document.getElementById("valueMid").innerHTML=mid_val+mid_val_ex; 
    var y = parseInt(y_data / init_max_y * height);
    if(0 > y) if (trdn == 0) {
        trdn = -68+20; // value used for generator
        document.getElementById("shift").setAttribute("transform", "translate(55,"+trdn+")");
    }
    var pt = old_x+","+l_y[i]+" "+x+","+y;
    var el = document.createElementNS(xmlns,"polyline");
    el.setAttributeNS(null, "points", pt);
    el.setAttributeNS(null, "class", "src"+i);
    l_y[i] = y;
    return el;
}

function init() {
    var de = document.getElementById("trel");
    if(de.firstChild) if(!de.firstChild.xval) {
        var max_t = scale_sec*2;
        var pts = de.childNodes.length;
        var dt = max_t / MAXPOINTS;
        var ts = (new Date()).getTime() / 1000;
        for(var j=0;pts>j;j++) {
            de.childNodes[j].xval = j * (width / MAXPOINTS);
            de.childNodes[j].seconds = ts - ((pts - j) * dt);
        }
        var innum=0;
        for(var j=0;de.lastChild.childNodes.length>j;j++) {
            innum = parseInt(de.lastChild.childNodes[j].getAttribute("class").replace("src",""));
            l = de.lastChild.childNodes[j].getAttribute("points").split(",");
            l_y[innum] = parseInt(l[l.length-1]);
        }
        old_x = pts * (width / MAXPOINTS);
    }
}

</script>
<style>

.axis {
stroke: #000000;
stroke-width: 1px;
}

.liner {
stroke: #000000;
stroke-width: 1px;
stroke-dasharray: 1,5;
}


body {
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

polyline {
    fill: none;
    stroke-width: 2;
    vector-effect: non-scaling-stroke;
}

.data {
    stroke: #0074d9;
}

body, html {
  height: 100%;
}

.src0 {
    stroke: #5DA5DA; /* (blue) */
}
.src1 {
    stroke: #F15854; /* (red) */
}
.src2 {
    stroke: #DECF3F; /* (yellow) */
}
.src3 {
    stroke: #B276B2; /* (purple) */
}
.src4 {
    stroke: #B2912F; /* (brown) */
}
.src5 {
    stroke: #F17CB0; /* (pink) */
}
.src6 {
    stroke: #60BD68; /* (green) */
}
.src7 {
    stroke: #FAA43A; /* (orange) */
}
.src8 {
    stroke: #4D4D4D; /* (gray) */
}

</style>

<g transform="translate(55,$TRDN)" id="shift">
<text x="5" y="5" text-anchor="start" id="msg" style="font-size: 18px">$MSG</text>
<text x="-5" y="79" text-anchor="end" id="valueMid" style="font-size: 18px">$VALUEMID</text>
<text x="250" y="170" text-anchor="middle" id="timeMid" style="font-size: 18px">$TIMEMID</text>
<text x="-5" y="155" text-anchor="end" id="zeroax" style="font-size: 18px">0</text>
<svg class="axis">
    <polyline points="0,150 500,150"/>
    <polyline points="250,150 250,146"/>
    <polyline points="0,0 0,150"/>
</svg>

<svg class="liner">
    <polyline points="0,75 500,75"/>
</svg>
<g transform="translate(0,150) scale(1,-1)" id="trel">$DATAPOINTS</g>
</g>
</svg>